version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: codecrafts-db-prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-codecrafts_prod}
      POSTGRES_USER: ${POSTGRES_USER:-codecrafts}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - codecrafts-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-codecrafts} -d ${POSTGRES_DB:-codecrafts_prod}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: codecrafts-redis-prod
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - codecrafts-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # FastAPI Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
      args:
        - BUILD_ENV=production
    container_name: codecrafts-backend-prod
    restart: unless-stopped
    environment:
      - ENV=production
      - DATABASE_URL=postgresql://${POSTGRES_USER:-codecrafts}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB:-codecrafts_prod}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - ALGORITHM=${ALGORITHM:-HS256}
      - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES:-30}
      - JUDGE0_API_URL=${JUDGE0_API_URL:-http://judge0:2358}
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost:3000,https://codecrafts.app}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - SENTRY_DSN=${SENTRY_DSN}
      - RATE_LIMIT_ENABLED=${RATE_LIMIT_ENABLED:-true}
      - MAX_REQUESTS_PER_MINUTE=${MAX_REQUESTS_PER_MINUTE:-60}
    volumes:
      - ./backend/logs:/app/logs
    networks:
      - codecrafts-network
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
      args:
        - REACT_APP_API_URL=${REACT_APP_API_URL:-http://localhost:8000}
        - REACT_APP_ENVIRONMENT=production
        - REACT_APP_SENTRY_DSN=${REACT_APP_SENTRY_DSN}
        - REACT_APP_ANALYTICS_ID=${REACT_APP_ANALYTICS_ID}
    container_name: codecrafts-frontend-prod
    restart: unless-stopped
    networks:
      - codecrafts-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: codecrafts-nginx-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    environment:
      - DOMAIN_NAME=${DOMAIN_NAME:-codecrafts.app}
      - SSL_EMAIL=${SSL_EMAIL}
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
      - certbot_data:/var/www/certbot
      - certbot_conf:/etc/letsencrypt
    networks:
      - codecrafts-network
    depends_on:
      - backend
      - frontend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Judge0 for code execution (optional, can use external service)
  judge0:
    image: judge0/judge0:1.13.0
    container_name: codecrafts-judge0-prod
    restart: unless-stopped
    environment:
      - REDIS_HOST=redis
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - POSTGRES_HOST=db
      - POSTGRES_DB=${POSTGRES_DB:-codecrafts_prod}
      - POSTGRES_USER=${POSTGRES_USER:-codecrafts}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - judge0_data:/tmp
    networks:
      - codecrafts-network
    depends_on:
      - db
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:2358/system_info"]
      interval: 60s
      timeout: 30s
      retries: 3

  # Certbot for SSL certificates
  certbot:
    image: certbot/certbot:latest
    container_name: codecrafts-certbot-prod
    volumes:
      - certbot_data:/var/www/certbot
      - certbot_conf:/etc/letsencrypt
    command: certonly --webroot --webroot-path=/var/www/certbot --email ${SSL_EMAIL} --agree-tos --no-eff-email -d ${DOMAIN_NAME}
    depends_on:
      - nginx

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: codecrafts-prometheus-prod
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - codecrafts-network
    profiles:
      - monitoring

  # Grafana for monitoring dashboards (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: codecrafts-grafana-prod
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - codecrafts-network
    profiles:
      - monitoring

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  judge0_data:
    driver: local
  nginx_logs:
    driver: local
  certbot_data:
    driver: local
  certbot_conf:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  codecrafts-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16